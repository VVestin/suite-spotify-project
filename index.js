const dotenv = require('dotenv')
const express = require('express')
var exphbs = require('express-handlebars')
const SpotifyWebApi = require('spotify-web-api-node')

dotenv.config()

const app = express()
app.engine('.hbs', exphbs({ extname: '.hbs' }))
app.set('view engine', '.hbs')
app.set('port', 8888)

const scopes = [
   'user-library-read',
   'user-read-email',
   'playlist-read-private',
   'playlist-modify-private',
]

const genSpotifyApi = () =>
   new SpotifyWebApi({
      redirectUri: `http://localhost:${app.get('port')}/callback`,
      clientId: process.env.SPOTIFY_CLIENT_ID,
      clientSecret: process.env.SPOTIFY_CLIENT_SECRET,
   })

const globalSpotifyApi = genSpotifyApi()
const users = {}

app.get('/', (req, res) => {
   const access_token = req.query.access_token || 'none'
   res.render('home', {
      access_token,
      users: Object.keys(users),
   })
})

app.get('/login', (req, res) => {
   res.redirect(globalSpotifyApi.createAuthorizeURL(scopes))
})

const getUser = access_token => {
   globalSpotifyApi.setAccessToken(access_token)
   return globalSpotifyApi.getMe().then(data => {
      const me = data.body

      console.log(me)
      if (!users[me.id]) console.log('user', me.id, 'has not logged in before')
      else users[me.id].me = me

      return users[me.id]
   })
}

app.get('/get-me', (req, res) => {
   if (!req.query.access_token) return res.send('No access token provided')
   getUser(req.query.access_token)
      .then(user => {
         if (!user)
            return res.render('home', {
               errorMessage: 'User not known to this subscription service',
            })
         res.send(JSON.stringify(user.me))
      })
      .catch(error => {
         console.error('getMe() Error:', error)
         res.send(`getMe() Error: ${error}`)
      })
})

app.get('/generate-playlist', async (req, res) => {
   /**
    * Randomly shuffle an array
    * https://stackoverflow.com/a/2450976/1293256
    * @param  {Array} array The array to shuffle
    * @return {String}      The first item in the shuffled array
    */
   const shuffle = function (array) {
      let currentIndex = array.length
      let temporaryValue, randomIndex

      // While there remain elements to shuffle...
      while (0 !== currentIndex) {
         // Pick a remaining element...
         randomIndex = Math.floor(Math.random() * currentIndex)
         currentIndex -= 1

         // And swap it with the current element.
         temporaryValue = array[currentIndex]
         array[currentIndex] = array[randomIndex]
         array[randomIndex] = temporaryValue
      }

      return array
   }

   if (!req.query.access_token) return res.send('No access token provided')
   const user = (await getUser(req.query.access_token)) || {
      spotifyApi: globalSpotifyApi,
      id: 'vvestin',
   }

   Promise.all([
      user.spotifyApi.getMySavedTracks({ limit: 50 }).then(data => {
         return data.body.items.map(song => ({
            name: song.track.name,
            artist: song.track.artists[0].name,
            id: song.track.id,
         }))
      }),
      user.spotifyApi
         .createPlaylist('Generated PL', {
            description: "Autogenerated by Weston's small app",
            public: false,
         })
         .then(data => data.body),
   ])
      .then(([songs, playlist]) => {
         console.log(songs, playlist)
         return user.spotifyApi.addTracksToPlaylist(
            playlist.id,
            shuffle(songs)
               .slice(0, 10)
               .map(song => 'spotify:track:' + song.id)
         )
      })
      .then(data => {
         console.log('Created playlist', data)
         res.send('Created a playlist called "Generated PL"')
      })
      .catch(error => {
         console.error('Error creating a new playlist', error)
         res.send('Error creating a new playlist' + error)
      })
})

app.get('/callback', (req, res) => {
   const error = req.query.error
   const code = req.query.code
   const state = req.query.state

   if (error) {
      console.error('Callback Error:', error)
      res.render('home', { errorMessage: error })
      return
   }

   const user = {
      spotifyApi: genSpotifyApi(),
   }

   globalSpotifyApi
      .authorizationCodeGrant(code)
      .catch(error => {
         console.error('Error getting Tokens:', error)
         res.send(`Error getting Tokens: ${error}`)
      })
      .then(data => {
         const access_token = data.body['access_token']
         const refresh_token = data.body['refresh_token']
         const expires_in = data.body['expires_in']

         console.log('access_token:', access_token)
         console.log('refresh_token:', refresh_token)
         console.log(
            `Sucessfully retreived access token. Expires in ${expires_in} s.`
         )

         user.spotifyApi.setAccessToken(access_token)
         user.spotifyApi.setRefreshToken(refresh_token)
         user.expires_in = expires_in

         res.redirect('/?access_token=' + access_token)

         setInterval(async () => {
            const data = await user.spotifyApi.refreshAccessToken()
            const access_token = data.body['access_token']

            console.log('The access token has been refreshed!')
            console.log('access_token:', access_token)
         }, (user.expires_in / 2) * 1000)

         //res.send('Success! Your api token is ' + access_token)

         return user.spotifyApi.getMe()
      })
      .then(data => data.body)
      .then(me => {
         console.log('getMe() returned data', me)
         if (users[me.id]) return

         user.me = me
         users[me.id] = user
      })
})

console.log('spotify client id', process.env.SPOTIFY_CLIENT_ID)

app.listen(app.get('port'), () => {
   console.log('Server started on port', app.get('port'))
})
